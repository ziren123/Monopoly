package com.example.greendaodemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.ly.taucoin.entity.Accounts;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNTS".
*/
public class AccountsDao extends AbstractDao<Accounts, Long> {

    public static final String TABLENAME = "ACCOUNTS";

    /**
     * Properties of entity Accounts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, int.class, "user_id", false, "USER_ID");
        public final static Property Fb_id = new Property(2, int.class, "fb_id", false, "FB_ID");
        public final static Property Prikey = new Property(3, String.class, "prikey", false, "PRIKEY");
        public final static Property Pubkey = new Property(4, String.class, "pubkey", false, "PUBKEY");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property Execuated = new Property(6, int.class, "execuated", false, "EXECUATED");
        public final static Property Txid = new Property(7, int.class, "txid", false, "TXID");
        public final static Property Status = new Property(8, int.class, "status", false, "STATUS");
        public final static Property Time = new Property(9, String.class, "time", false, "TIME");
    }


    public AccountsDao(DaoConfig config) {
        super(config);
    }
    
    public AccountsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: user_id
                "\"FB_ID\" INTEGER NOT NULL ," + // 2: fb_id
                "\"PRIKEY\" TEXT," + // 3: prikey
                "\"PUBKEY\" TEXT," + // 4: pubkey
                "\"ADDRESS\" TEXT," + // 5: address
                "\"EXECUATED\" INTEGER NOT NULL ," + // 6: execuated
                "\"TXID\" INTEGER NOT NULL ," + // 7: txid
                "\"STATUS\" INTEGER NOT NULL ," + // 8: status
                "\"TIME\" TEXT);"); // 9: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Accounts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUser_id());
        stmt.bindLong(3, entity.getFb_id());
 
        String prikey = entity.getPrikey();
        if (prikey != null) {
            stmt.bindString(4, prikey);
        }
 
        String pubkey = entity.getPubkey();
        if (pubkey != null) {
            stmt.bindString(5, pubkey);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
        stmt.bindLong(7, entity.getExecuated());
        stmt.bindLong(8, entity.getTxid());
        stmt.bindLong(9, entity.getStatus());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(10, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Accounts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUser_id());
        stmt.bindLong(3, entity.getFb_id());
 
        String prikey = entity.getPrikey();
        if (prikey != null) {
            stmt.bindString(4, prikey);
        }
 
        String pubkey = entity.getPubkey();
        if (pubkey != null) {
            stmt.bindString(5, pubkey);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
        stmt.bindLong(7, entity.getExecuated());
        stmt.bindLong(8, entity.getTxid());
        stmt.bindLong(9, entity.getStatus());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(10, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Accounts readEntity(Cursor cursor, int offset) {
        Accounts entity = new Accounts( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // user_id
            cursor.getInt(offset + 2), // fb_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // prikey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pubkey
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.getInt(offset + 6), // execuated
            cursor.getInt(offset + 7), // txid
            cursor.getInt(offset + 8), // status
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Accounts entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.getInt(offset + 1));
        entity.setFb_id(cursor.getInt(offset + 2));
        entity.setPrikey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPubkey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExecuated(cursor.getInt(offset + 6));
        entity.setTxid(cursor.getInt(offset + 7));
        entity.setStatus(cursor.getInt(offset + 8));
        entity.setTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Accounts entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Accounts entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Accounts entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
